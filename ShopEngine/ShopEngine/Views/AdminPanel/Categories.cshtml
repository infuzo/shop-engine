@{
	ViewData["Title"] = "View, add, change and remove categories";
	Layout = "~/Views/AdminPanel/_Layout.cshtml";
}
@model IEnumerable<ShopEngine.Models.CategoryModel>

<div class="bordered" style="width: 410px; height: 400px; display: inline-block; float: left;">
	<strong style="margin: 5px 5px;">List of categories:</strong>
	<div class="bordered" id="categoriesListParent" style="width: 395px; height: 300px; margin-left: 5px; margin-top: 5px; overflow: scroll; padding: 5px;"></div>
	<button style="display: block; margin: 5px auto;" onclick="addCategory(event)">Add category</button>
</div> <div class="bordered selectedCategoryForm" style="margin-left: 5px; padding: 10px 10px; width: 410px; height: 400px; display: inline-block; float: left;">
	<br />
	<strong id="selectedCategoryHeader">HEADER_UNDEFINED_CONTENT</strong> <br /><br />
	<label for="selectedCategoryName">Name: </label><input type="text" required="required" max="60" id="selectedCategoryName" /><br /><br />
	<label for="selectedCategoryDescription">Description: </label><textarea required="required" maxlength="250" id="selectedCategoryDescription"></textarea><br /><br />
	<label for="selectedCategorySubcatGuid">Subcategory guid: </label><input type="text" id="selectedCategorySubcatGuid" /><br />
	<span><em>Paste guid of desired parent category here</em></span><br /><br /> <!--TODO: DropDownList-->

	<label for="selectedCategoryGuid">GUID: </label><input type="text" id="selectedCategoryGuid" readonly="readonly" /><br /><br />

	<br />
	<button style="display: none;" id="selectedCategoryAdd">Add/Save category</button> <button style="display: none;" id="selectedCategoryRemove">Remove category</button>
</div>

<script>
	const undefinedGuid = "00000000-0000-0000-0000-000000000000";

	const idCategoriesListParent = "categoriesListParent";
	const idSelectedCategoryHeader = "selectedCategoryHeader";
	const idSelectedCategoryName = "selectedCategoryName";
	const idSelectedCategoryDescription = "selectedCategoryDescription";
	const idSelectedCategorySubcatGuid = "selectedCategorySubcatGuid";
	const idSelectedCategoryGuid = "selectedCategoryGuid";
	const idSelectedCategoryButtonAdd = "selectedCategoryAdd";
	const idSelectedCategoryButtonRemove = "selectedCategoryRemove";

	//TODO: from localization
	const textDefault = "Select the category or add new one";
	const textEditHeader = "Editing the ";
	const textAddHeader = "Adding the new category";

	class Category {
		constructor(guid = "", subCatGuid = "", name = "", desc = "") {
			this.Id = guid;
			this.SubCategoryGuid = subCatGuid;
			this.Name = name;
			this.Description = desc;
		}

		setFromJson(jsonString) {
			let json = JSON.parse(jsonString);

			this.Id = json.id;
			this.SubCategoryGuid = json.subCategoryGuid;
			this.Name = json.name;
			this.Description = json.description;
		}

		getFormData() {
			return "Id=" + (this.Id == "" ? undefinedGuid : encodeURIComponent(this.Id)) +
				"&SubCategoryGuid=" + (this.SubCategoryGuid == "" ? undefinedGuid : encodeURIComponent(this.SubCategoryGuid)) +
				"&Name=" + encodeURIComponent(this.Name) + "&Description=" + encodeURIComponent(this.Description);
		}
	}

	function addCategoryToList(guid, subCatGuid, name, description) {
		let category = new Category(guid, subCatGuid, name, description);
		categories.push(category);
	}

	function renderCategoryList() {
		var categoriesParent = document.getElementById(idCategoriesListParent);
		while (categoriesParent.firstChild != null) {
			categoriesParent.removeChild(categoriesParent.firstChild);
		}

		//todo: add "broken" subcategories in roots
		var roots = categories.filter(cat => cat.SubCategoryGuid == "" || cat.SubCategoryGuid == undefined);
		for (var rootCat of roots) {
			addCategoriesWithNesting(categoriesParent, rootCat, 0);
		}
	}

	function addCategoriesWithNesting(parent = HTMLElement, rootCategory = Category, nestingLevel = 0) {
		createCategoryLink(parent, rootCategory, nestingLevel);
		var childs = categories.filter(cat => cat.SubCategoryGuid == rootCategory.Id);
		nestingLevel++;
		for (child of childs) {
			addCategoriesWithNesting(parent, child, nestingLevel);
		}
	}

	function createCategoryLink(parent = HTMLElement, category = Category, nestingLevel = 0) {
		let newCategoryLink = document.createElement("a");
		newCategoryLink.href = "#";
		let innerText = "";
		for (var index = 0; index < nestingLevel; index++) { innerText += "-"; }
		newCategoryLink.innerText = innerText + category.Name;

		newCategoryLink.addEventListener("click", (event) => selectCategory(event, category));

		parent.appendChild(newCategoryLink);
		parent.appendChild(document.createElement("br"));
	}

	function setWaitingSelectedContent(header, value) {
		document.getElementById(idSelectedCategoryHeader).innerText = header;

		let currentStyleValue = value ? "display: none;" : "display: inline-block;";

		document.getElementById(idSelectedCategoryName).style = currentStyleValue;
		document.getElementById(idSelectedCategoryDescription).style = currentStyleValue;
		document.getElementById(idSelectedCategorySubcatGuid).style = currentStyleValue;
		document.getElementById(idSelectedCategoryGuid).style = currentStyleValue;
		document.getElementById(idSelectedCategoryButtonAdd).style = currentStyleValue;
		document.getElementById(idSelectedCategoryButtonRemove).style = currentStyleValue;
	}

	function selectCategory(event, selectedCategory) {
		setWaitingSelectedContent(textEditHeader + selectedCategory.Name, false);

		document.getElementById(idSelectedCategoryName).value = selectedCategory.Name;
		document.getElementById(idSelectedCategoryDescription).value = selectedCategory.Description;
		document.getElementById(idSelectedCategorySubcatGuid).value = selectedCategory.SubCategoryGuid;
		document.getElementById(idSelectedCategoryGuid).value = selectedCategory.Id;

		document.getElementById(idSelectedCategoryButtonAdd).innerText = "Save";
		document.getElementById(idSelectedCategoryButtonAdd).onclick = (e) => editCategory(e, selectedCategory);
		document.getElementById(idSelectedCategoryButtonRemove).onclick = (e) => deleteSelectedCategory(e, selectedCategory);

		if (event != null) {
			event.stopPropagation();
		}
	}

	function editCategory(event, category) {
		event.stopPropagation();
		console.log("Edit the " + category.Name);
	}

	function deleteSelectedCategory(event, category) {
		let result = confirm("Do you want to delete categery \"" + category.Name + "\"?");
		if (result) {
			console.log("Delete category " + category.Id);
		}

		event.stopPropagation();
	}

	function addCategory(event, subCatGuid = "", name = "", desc = "") {
		setWaitingSelectedContent(textAddHeader, false);
		document.getElementById(idSelectedCategoryButtonRemove).style = "display: none;";

		document.getElementById(idSelectedCategoryName).value = name;
		document.getElementById(idSelectedCategoryDescription).value = desc;
		document.getElementById(idSelectedCategorySubcatGuid).value = subCatGuid;
		document.getElementById(idSelectedCategoryGuid).value = "";

		document.getElementById(idSelectedCategoryButtonAdd).innerText = "Add";
		document.getElementById(idSelectedCategoryButtonAdd).onclick =
			(e) => {
				let category = new Category("",
					document.getElementById(idSelectedCategorySubcatGuid).value,
					document.getElementById(idSelectedCategoryName).value,
					document.getElementById(idSelectedCategoryDescription).value);
				onAddCategory(e, category);
			};

		if (event != null) {
			event.stopPropagation();
		}
	}

	function onAddCategory(event, category = new Category()) {
		event.stopPropagation();

		if (category.Name == "" || category.Description == "") {
			alert("Name and description should have values.");
			return;
		}

		setWaitingSelectedContent("Category is adding... Please wait", true);

		let request = new XMLHttpRequest();
		request.open("POST", "/AdminPanel/AddCategory");
		request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');
		request.onreadystatechange = () => {
			if (request.readyState == 4) {
				if (request.status == 200) {
					var addedObject = new Category();
					addedObject.setFromJson(request.responseText);
					addCategoryToList(addedObject.Id, addedObject.SubCategoryGuid, addedObject.Name, addedObject.Description);
					renderCategoryList();
					selectCategory(null, addedObject);
				}
				else {
					alert("Adding the new category failed.\n" + request.responseText);
					setWaitingSelectedContent("", false);
					addCategory(null, category.SubCategoryGuid, category.Name, category.Description);
				}
			}
		};

		request.send(category.getFormData());
	}

	var categories = [];
	setWaitingSelectedContent(textDefault, true);
</script>

@{
	foreach (var category in Model)
	{
		<text>
			<script>
			addCategoryToList('@category.Id', '@category.SubCategoryGuid', '@category.Name', '@category.Description');
			</script>
		</text>
	}
	<script>renderCategoryList();</script>
}