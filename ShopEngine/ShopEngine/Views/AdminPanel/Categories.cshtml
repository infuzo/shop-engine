@{
	ViewData["Title"] = "View, add, change and remove categories";
	Layout = "~/Views/AdminPanel/_Layout.cshtml";
}
@model IEnumerable<ShopEngine.Models.CategoryModel>


<div class="bordered leftList">
	<br /><strong style="margin: 5px 5px;">List of categories:</strong>
	<button style="display: block; margin: 5px auto;" onclick="addCategory(event)">Add category</button>
	<div class="bordered" id="listItemsParent"></div>
</div>
<div class="selectedItemContent selectedItemForm">
	<br />
	<strong id="selectedCategoryHeader">HEADER_UNDEFINED_CONTENT</strong> <br /><br />
	<label for="selectedCategoryName">Name: </label><input type="text" required="required" max="60" id="selectedCategoryName" /><br /><br />
	<label for="selectedCategoryDescription">Description: </label><textarea required="required" maxlength="250" id="selectedCategoryDescription"></textarea><br /><br />
	<label for="selectedCategorySubcatGuid">Subcategory guid: </label><input type="text" id="selectedCategorySubcatGuid" /><br />
	<span><em>Paste guid of desired parent category here</em></span><br /><br /> <!--TODO: DropDownList-->

	<label for="selectedCategoryGuid">GUID: </label><input type="text" id="selectedCategoryGuid" readonly="readonly" /><br /><br />

	<br />
	<button style="display: none;" id="selectedCategoryAdd">UNDEFINED_ACTION_1</button> <button style="display: none;" id="selectedCategoryRemove">UNDEFINED_ACTION_2</button>
</div>

<script>
	const idCategoriesListParent = "listItemsParent";
	const idSelectedCategoryHeader = "selectedCategoryHeader";
	const idSelectedCategoryName = "selectedCategoryName";
	const idSelectedCategoryDescription = "selectedCategoryDescription";
	const idSelectedCategorySubcatGuid = "selectedCategorySubcatGuid";
	const idSelectedCategoryGuid = "selectedCategoryGuid";
	const idSelectedCategoryButtonAdd = "selectedCategoryAdd";
	const idSelectedCategoryButtonRemove = "selectedCategoryRemove";

	//TODO: from localization
	const textDefault = "Select the category or add new one";
	const textEditHeader = "Editing the ";
	const textAddHeader = "Adding the new category";
	const textModelValidationFailed = "Name and description should have values.";
	const textAddingModelProcess = "Category is adding... Please wait";
	const textAddingFailed = "Adding the new category failed.";
	const textDeleteCategoryConfirmation = "Do you want to delete categery ";
	const textDeletingCategoryProcess = "Category is deleting. Please wait";
	const textCategoryDeletedSuccessfully = "Category was deleted successfully";
	const textDeletingFailed = "Deleting the category failed.";
	const textEditWaiting = "Category is editing... Please wait";
	const textEditFailed = "Edit the category failed.";

	class Category {
		constructor(guid = "", subCatGuid = "", name = "", desc = "") {
			this.Id = guid;
			this.SubCategoryGuid = subCatGuid;
			this.Name = name;
			this.Description = desc;
		}

		setFromJson(jsonString) {
			let json = JSON.parse(jsonString);

			this.Id = json.id;
			this.SubCategoryGuid = json.subCategoryGuid;
			this.Name = json.name;
			this.Description = json.description;
		}

		getFormData() {
			return "Id=" + (this.Id == "" ? undefinedGuid : encodeURIComponent(this.Id)) +
				"&SubCategoryGuid=" + (this.SubCategoryGuid == "" ? undefinedGuid : encodeURIComponent(this.SubCategoryGuid)) +
				"&Name=" + encodeURIComponent(this.Name) + "&Description=" + encodeURIComponent(this.Description);
		}

		isValid() {
			return this.Name != null && this.Name.length > 0
				&& this.Description != null && this.Description.length > 0;
		}
	}

	function addCategoryToList(guid, subCatGuid, name, description) {
		let category = new Category(guid, subCatGuid, name, description);
		categories.push(category);
		return category;
	}

	function removeCategoryFromList(category = Category) {
		var elementIndex = categories.indexOf(category);
		if (elementIndex != -1) {
			categories.splice(elementIndex, 1);
		}
	}

	function renderCategoryList() {
		var categoriesParent = document.getElementById(idCategoriesListParent);
		while (categoriesParent.firstChild != null) {
			categoriesParent.removeChild(categoriesParent.firstChild);
		}

		var roots = categories.filter(cat => cat.SubCategoryGuid == "" || cat.SubCategoryGuid == undefined);
		var broken = categories.filter(cat => cat.SubCategoryGuid != "" && cat.SubCategoryGuid != undefined
			&& !categories.some(cat2 => cat2.Id == cat.SubCategoryGuid));
		for (var rootCat of roots) {
			addCategoriesWithNesting(categoriesParent, rootCat, 0);
		}
		for (var brokenCat of broken) {
			addCategoriesWithNesting(categoriesParent, brokenCat, 0, true);
		}
	}

	function addCategoriesWithNesting(parent = HTMLElement, rootCategory = Category, nestingLevel = 0, broken = false) {
		createCategoryLink(parent, rootCategory, nestingLevel, broken);
		var childs = categories.filter(cat => cat.SubCategoryGuid == rootCategory.Id);
		nestingLevel++;
		for (child of childs) {
			addCategoriesWithNesting(parent, child, nestingLevel, broken);
		}
	}

	function createCategoryLink(parent = HTMLElement, category = Category, nestingLevel = 0, broken = false) {
		let newCategoryLink = document.createElement("a");
		newCategoryLink.href = "#";
		let innerText = "";
		for (var index = 0; index < nestingLevel; index++) { innerText += "-"; }
		if (innerText.length > 0) { innerText += " "; }
		newCategoryLink.innerText = innerText + category.Name;
		if (broken) {
			newCategoryLink.style = "color: red;";
		}

		newCategoryLink.addEventListener("click", (event) => selectCategory(event, category));

		parent.appendChild(newCategoryLink);
		parent.appendChild(document.createElement("br"));
	}

	function setWaitingSelectedContent(header, value) {
		document.getElementById(idSelectedCategoryHeader).innerText = header;

		let currentStyleValue = value ? "display: none;" : "display: inline-block;";

		document.getElementById(idSelectedCategoryName).style = currentStyleValue;
		document.getElementById(idSelectedCategoryDescription).style = currentStyleValue;
		document.getElementById(idSelectedCategorySubcatGuid).style = currentStyleValue;
		document.getElementById(idSelectedCategoryGuid).style = currentStyleValue;
		document.getElementById(idSelectedCategoryButtonAdd).style = currentStyleValue;
		document.getElementById(idSelectedCategoryButtonRemove).style = currentStyleValue;
	}

	function selectCategory(event, selectedCategory) {
		setWaitingSelectedContent(textEditHeader + selectedCategory.Name, false);

		document.getElementById(idSelectedCategoryName).value = selectedCategory.Name;
		document.getElementById(idSelectedCategoryDescription).value = selectedCategory.Description;
		document.getElementById(idSelectedCategorySubcatGuid).value = selectedCategory.SubCategoryGuid;
		document.getElementById(idSelectedCategoryGuid).value = selectedCategory.Id;

		document.getElementById(idSelectedCategoryButtonAdd).innerText = "Save";
		document.getElementById(idSelectedCategoryButtonAdd).onclick = (e) => onEditCategory(e, selectedCategory);
		document.getElementById(idSelectedCategoryButtonRemove).innerText = "Delete";
		document.getElementById(idSelectedCategoryButtonRemove).onclick = (e) => deleteSelectedCategory(e, selectedCategory);

		if (event != null) {
			event.stopPropagation();
		}
	}

	function onEditCategory(event, category = Category) {
		if (event != null) {
			event.stopPropagation();
		}

		category.Name = document.getElementById(idSelectedCategoryName).value;
		category.Description = document.getElementById(idSelectedCategoryDescription).value;
		category.SubCategoryGuid = document.getElementById(idSelectedCategorySubcatGuid).value;

		if (category == null || !category.isValid()) {
			alert(textModelValidationFailed);
			return;
		}

		let request = new XMLHttpRequest();
		request.open("POST", "/AdminPanel/EditCategory");
		request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');

		request.onreadystatechange = () => {
			if (request.readyState == 4) {
				if (request.status == 200) {
					removeCategoryFromList(category);
					category = addCategoryToList(category.Id, category.SubCategoryGuid, category.Name, category.Description);
					renderCategoryList();
				}
				else {
					alert(`${textEditFailed}\n${request.status} - ${request.responseText}`);
				}
				setWaitingSelectedContent("", false);
				selectCategory(null, category);
			}
		};

		setWaitingSelectedContent(textEditWaiting, true);
		request.send(category.getFormData());
	}

	function deleteSelectedCategory(event, category = Category) {
		let result = confirm(textDeleteCategoryConfirmation + "\"" + category.Name + "\"?");
		if (result) {
			let request = new XMLHttpRequest();
			request.open("POST", "/AdminPanel/RemoveCategory");
			request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');

			request.onreadystatechange = () => {
				if (request.readyState == 4) {
					if (request.status == 200) {
						setWaitingSelectedContent(textCategoryDeletedSuccessfully, true);
						removeCategoryFromList(category);
						renderCategoryList();
					}
					else {
						setWaitingSelectedContent("", false);
						alert(`${textDeletingFailed}\n${request.status} - ${request.responseText}`);
						selectCategory(null, category);
					}
				}
			};

			setWaitingSelectedContent(textDeletingCategoryProcess, true);
			request.send("guid=" + category.Id);
		}

		event.stopPropagation();
	}

	function addCategory(event, subCatGuid = "", name = "", desc = "") {
		setWaitingSelectedContent(textAddHeader, false);
		document.getElementById(idSelectedCategoryButtonRemove).style = "display: none;";

		document.getElementById(idSelectedCategoryName).value = name;
		document.getElementById(idSelectedCategoryDescription).value = desc;
		document.getElementById(idSelectedCategorySubcatGuid).value = subCatGuid;
		document.getElementById(idSelectedCategoryGuid).value = "";

		document.getElementById(idSelectedCategoryButtonAdd).innerText = "Add";
		document.getElementById(idSelectedCategoryButtonAdd).onclick =
			(e) => {
				let category = new Category("",
					document.getElementById(idSelectedCategorySubcatGuid).value,
					document.getElementById(idSelectedCategoryName).value,
					document.getElementById(idSelectedCategoryDescription).value);
				onAddCategory(e, category);
			};

		if (event != null) {
			event.stopPropagation();
		}
	}

	function onAddCategory(event, category = new Category()) {
		event.stopPropagation();

		if (category == null || !category.isValid()) {
			alert(textModelValidationFailed);
			return;
		}

		setWaitingSelectedContent(textAddingModelProcess, true);

		let request = new XMLHttpRequest();
		request.open("POST", "/AdminPanel/AddCategory");
		request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');
		request.onreadystatechange = () => {
			if (request.readyState == 4) {
				if (request.status == 200) {
					var addedObject = new Category();
					addedObject.setFromJson(request.responseText);
					addedObject = addCategoryToList(addedObject.Id, addedObject.SubCategoryGuid, addedObject.Name, addedObject.Description);
					renderCategoryList();
					selectCategory(null, addedObject);
				}
				else {
					alert(`${textAddingFailed}\n${request.status} - ${request.responseText}`);
					setWaitingSelectedContent("", false);
					addCategory(null, category.SubCategoryGuid, category.Name, category.Description);
				}
			}
		};

		request.send(category.getFormData());
	}

	var categories = [];
	setWaitingSelectedContent(textDefault, true);

	@foreach (var category in Model)
	{
		<text>
			addCategoryToList('@category.Id', '@category.SubCategoryGuid', '@category.Name', '@category.Description');
		</text>
	}
	renderCategoryList();
</script>